#include <stdio.h>
#include <ctype.h>

int statistics(FILE *input_file, FILE *output_file); // declaration of the function that counts the given values
int endOfSentence(char character);
int endOfWord(char character);

int main(void)
{
    char input_file[32]; // array for the name of the input file from which we will read
    char output_file[32]; // array for the name of the output file to which we will write

    printf("Enter the name of the input file: \n");
    if (scanf("%31s", input_file) != 1 || input_file[0] == '\0') // check if the identifier is valid or empty
    {
        printf("Error during loading!\n");
        return 1;
    }

    printf("Enter the name of the output file: \n");
    if (scanf("%31s", output_file) != 1 || output_file[0] == '\0') // check if the identifier is valid or empty
    {
        printf("Error during loading!\n");
        return 1;
    }

    FILE *fr = fopen(input_file, "r"); // create a file pointer for FILE (fr=file_read) that opens the found file "r" = for reading
    if (fr == NULL)
    {
        perror("Error opening file for reading\n"); // perror = print a more detailed error message
        return 1;
    }
    else
    {
        printf("File %s has been opened for reading\n", input_file);
    }

    FILE *fw = fopen(output_file, "w"); // create a file pointer for FILE (fw=file_write) that opens the file for writing data "w" = for writing
    if (fw == NULL)
    {
        perror("Error opening the output file for writing.\n");
        fclose(fr); // if opening the output file fails, close the input file to avoid memory leaks
        return 1; // terminate the program with an error
    }

    statistics(fr, fw); // function that writes the given values and prints words to the console
    // after execution, we close the used files to release allocated memory that was allocated using fopen()
    fclose(fr);
    fclose(fw);

    return 0;
}
// definition of the endOfSentence function
int endOfSentence(char character)
{
    return character == '?' || character == '!' || character == '.';
}
// definition of the endOfWord function
int endOfWord(char character)
{
    return endOfSentence(character) || character == ' ' || character == '\n' || character == ',' || character == ';';
}
// definition of the statistics function
int statistics(FILE *input_file, FILE *output_file)
{
    int line_counter = 0; // create a line counter - ends with '\n'
    int word_counter = 0; // create a word counter
    int sentence_counter = 0; // create a sentence counter - ends with . ? !
    int word_index = 0;
    char character;
    char *word;
    size_t word_size = 16;

    if ((word = (char*) malloc(word_size * sizeof(char))) == NULL)
    {
        printf("Not enough memory!\n");
        return 1;
    }

    while ((character = getc(input_file)) != EOF)
    {
        // If the character is alphanumeric (i.e., part of a word)
        if (isalnum(character))
        {
            if(word_index >= word_size - 1)
            {
                word_size *= 2;
                char* new_word = (char*) realloc(word, word_size * sizeof(char));
                if (new_word == NULL)
                {
                    free(word);
                    printf("Not enough memory!\n");
                    return 1;
                }
                word = new_word; // Update the pointer to the new memory
            }

            word[word_index++] = character;  // Add the character to the word
            continue;  // Continue to the next character
        }

        // If we find a character that indicates the end of a word (space, punctuation, etc.)
        if (endOfWord(character) && word_index > 0)
        {
            word_counter++;  // Count the word

            // If it's an end-of-sentence character, count the sentence
            if (endOfSentence(character))
            {
                sentence_counter++;
            }

            // Terminate the word with a null-terminator
            word[word_index] = '\0';

            // Print the word to the console
            printf("Word %d: %s\n", word_counter, word);

            // Reset the index for the next word
            word_index = 0;
        }

        // If it's a new line, count the line
        if (character == '\n')
        {
            line_counter++;
        }
    }

    fprintf(output_file, "Number of lines: %d\n", line_counter);
    fprintf(output_file, "Number of words: %d\n", word_counter);
    fprintf(output_file, "Number of sentences: %d\n", sentence_counter);

    free((void*)word);
    word = NULL;
}
